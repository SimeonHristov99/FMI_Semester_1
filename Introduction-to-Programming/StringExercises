1. Да се напише функция, която
  1.1 приема като параметър символен низ и връща в резултат броя символи.
  1.2 приема като параметри символен низ и два символа като в резултат замества в дадения низ всяко срещане на първия символ с втория.
  1.3 приема като параметри символен низ и символ и в резултат премахва всички срещания на символа от низа.
  
2. Да се напише функция която.
  2.1 определя дали даден низ е палиндром.
  2.2 обръща даден низ.
  2.3 определя дали даден низ се състои само от букви от латинската азбука.
  
3. Да се напише функция която определя дали даден низ представлява число и ако да то връща стойността на числото в противен случай връща - 1.

4. Да се напише функция която приема два низа и в резултат добавя втория към първия. Приемаме че низовете са подадени като указатели към масиви от
 тип char.
 
 -----------------------------------------------------------SOLUTIONS-------------------------------------------------------------------
 
 1.1
int getCharacters(char string[])
{
	int cntr = 0;

	for (char *current = string; *current; ++current)
		++cntr;

	return cntr;
}

1.2
void getCharacters(char string[], char value1, char value2)
{
	for (char *current = string; *current; ++current)
		if (*current == value1)
			*current = value2;
}
1.3
void remove(char str[], char target)
{
	if (str[0] == '\0')
		return;

	str[0] = str[1];

	return remove(str + 1, target);
}

void findChar(char str[], char target)
{
	if (str[0] == '\0')
		return;

	if (str[0] == target)
	{
		remove(str, target); // helper function
		return findChar(str, target);
	}
		
	return findChar(str + 1, target);
}



2.1
void shiftLeft(char str[]);
void removeSpace(char str[]);
void capitalToSmall(char str[]);
int getSize(char str[])
{
	if (str[0] == '\0')
		return 0;

	return 1 + getSize(str + 1);
}

bool isPalindromeHelper(char str[], char str2[], int cntr, int middlepoint)
{
	if (str == str2 || cntr == middlepoint)
		return true;

	if (str[0] != str2[0])
		return false;

	return isPalindromeHelper(str + 1, str2 - 1, cntr - 1, middlepoint);
}

bool isPalindrome(char str[])
{
	capitalToSmall(str);
	removeSpace(str);
	return isPalindromeHelper(str, (str + getSize(str) - 1), getSize(str), getSize(str) / 2);
}
void capitalToSmall(char str[])
{
	if (str[0] == '\0')
		return;

	if (str[0] >= 'A' && str[0] <= 'Z')
		str[0] += 'a' - 'A' + 0;

	return capitalToSmall(str + 1);
}

void removeSpace(char str[])
{
	if (str[0] == '\0')
		return;

	if (!(str[0] >= 'a' && str[0] <= 'z'))
	{
		shiftLeft(str);
		return removeSpace(str);
	}

	return removeSpace(str + 1);
}

void shiftLeft(char str[])
{
	if (str[0] == '\0')
		return;

	str[0] = str[1];

	return shiftLeft(str + 1);
}
2.2
void swap(char &element1, char &element2)
{
	char temp = element2;
	element2 = element1;
	element1 = temp;
}

int getSize(char str[])
{
	if (str[0] == '\0')
		return 0;

	return 1 + getSize(str + 1);
}

void reverseHelper(int lastElement, char str[], int middlePoint)
{
	if (lastElement < 1)
		return;

	swap(str[0], str[lastElement]);

	return reverseHelper(lastElement - 2, str + 1, middlePoint);
}

void reverse(char str[])
{
	return reverseHelper((getSize(str) - 1), str, getSize(str) / 2);
}
2.3
bool onlyLatin(char str[])
{
	if (str[0] == '\0')
		return true;

	if (!(str[0] >= 'A' && str[0] <= 'Z' || str[0] >= 'a' && str[0] <= 'z'))
		return false;

	return onlyLatin(str + 1);
}



3.
int getNumberHelper(char str[], int &answer)
{
	if (str[0] == '\0')
		return 0;

	if (!(str[0] >= '0' && str[0] <= '9'))
		return -1;

	answer = answer * 10 + (str[0] - '0');

	return getNumberHelper(str + 1, answer);
}

int getNumber(char str[])
{
	int answer = 0;
	if (getNumberHelper(str, answer) == -1)
		return -1;
	return answer;
}



4.
int getSize(char str[])
{
	if (str[0] == '\0')
		return 0;

	return 1 + getSize(str + 1);
}

void concatenate(char str0[], char str1[])
{
	if (str1[0] == '\0')
		return;

	str0[getSize(str0)] = str1[0];

	return concatenate((str0 + 1), str1 + 1);
}
