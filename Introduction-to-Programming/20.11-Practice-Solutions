TASK 0
Напишете следните функции като сами прецените какъв ще е списъкът от параметри при всяка функция!

Abs() - намира абсолютна стойност на цяло число ;

Pow() за дадени две числа – реално и цяло , връща първото на степен второто ;

Min() за дадени 2 реални числа , връща по-малкото ;

Max() за дадени 2 реални числа , връща по-голямото ;

minOf3() за дадени 3 реални числа, връща най-малкото ; да се използва Min();

maxOf3() за дадени 3 реални числа , връща най-голямото ; да се използва Max();

isAlpha() за даден символ връща истина , ако той е буква от латинската азбука;

isDigit() за даден символ връща истина , ако той е цифра


/* // ***********************************************START**************************************
#include "pch.h"
#include <iostream>

using namespace std;

/*=========================================================================== ABS ===============================================================
int abs(int number)
{
	(number < 0) ? (number *= (-1)) : number;
	return number;
}


int main()
{
	int number = -1;

	cin >> number;

	cout << (abs(number));

	return 0;
}
*/

/*=========================================================================== POWER =============================================================
double pow(double number, double power)
{
	double result = 1;
	if (power >= 0)
	{
		for (int i = 1; i <= power; ++i)
		{
			result *= number;
		}
	}
	if (power < 0)
	{
		number = 1 / number;
		power *= (-1);
		for (int i = 1; i <= power; ++i)
		{
			result *= number;
		}
	}
	return result;
}

int main()
{	Pow() за дадени две реални числа, която връща първото на степен второто
	double number = -1, power = -1;
	cin >> number >> power;
	cout << (pow(number, power));

	return 0;
}
*/

/*
// =========================================================================== MIN =============================================================
	
double min(double number1, double number2, double check)
{
	check = number1;
	check < number2 ? check : check = number2;
	return check;
}

int main()
{	//Min() за дадени 2 реални числа , връща по-малкото.

	double number1 = -1, number2 = -1, check = -1;
	cin >> number1 >> number2;

	cout << (min(number1, number2, check)) << endl;

	return 0;
}
*/

/*
// =========================================================================== MAX ==============================================================
	//Max() за дадени 2 реални числа, връща по - голямото

double max(double number1, double number2, double check)
{
	check = number1;
	check > number2 ? check : check = number2;
	return check;
}

int main()
{	//Min() за дадени 2 реални числа , връща по-малкото.

	double number1 = -1, number2 = -1, check = -1;
	cin >> number1 >> number2;

	cout << (max(number1, number2, check)) << endl;

	return 0;
}
*/

/*
// =========================================================================== MINOF3 ===========================================================
	//minOf3() за дадени 3 реални числа, връща най-малкото ; да се използва Min();

double minOf3(double number1, double number2, double number3, double check)
{
	check = number1;
	(number2 < check) ? check = number2 : number2;
	(number3 < check) ? check = number3 : number3;

	return check;
}

int main()
{
	double number1 = -1, number2 = -2, number3 = -3, check = -1;
	cin >> number1 >> number2 >> number3;

	cout << (minOf3(number1, number2, number3, check)) << endl;

	return 0;
}
*/

/*
// =========================================================================== MAXOF3 ===========================================================
	//maxOf3() за дадени 3 реални числа, връща най - голямото; да се използва Max();

double maxOf3(double number1, double number2, double number3, double check)
{
	check = number1;
	number2 > check ? check = number2 : check;
	number3 > check ? check = number3 : check;

	return check;
}

int main()
{
	double number1 = -1, number2 = -2, number3 = -3, check = -4;
	cin >> number1 >> number2 >> number3;

	cout << maxOf3(number1, number2, number3, check) << endl;

	return 0;
}
*/

/*
//=========================================================================== isAlpha() =========================================================
	// isAlpha() за даден символ връща истина, ако той е буква от латинската азбука

bool isAlpha(char symbol)
{
	if (((int)symbol >= 65 && (int)symbol <= 90) || ((int)symbol >= 97 && (int)symbol <= 122))
	{
		return true;
	}
	else
	{
		return false;
	}	
}

int main()
{
	char symbol;
	cin >> symbol;

	cout << "\"" << symbol << "\"" << ((isAlpha(symbol)) ? " is a letter of the latin alphabet." : " is not a letter of the latin alphabet.");

	return 0;
}
*/ // ***********************************************END**************************************
**************************************************************************************************
TASK 1
Да се напише функция, която по дадени две естествени числа, връща истина, ако те са сдвоени прости и лъжа в противен случай .

Числата А и В се наричат сдвоени прости числа, ако са прости и ако

А + 2 = В . Проверката за просто число да се прави също от отделна функция .

******************************************START**************************************************
bool isPrime(int number)
{
	if (number < 2)
		return false;
	else
	{
		for (int checknumber = 2; checknumber * checknumber <= number; ++checknumber)
		{
			if (number % checknumber == 0)
				return false;
		}
	}
	return true;
}

int minOfTwo(int number1, int number2)
{
	return (number1 <= number2 ? number1 : number2);
}

bool secondCondition(int *num1, int *num2)
{
	return (minOfTwo(*num1, *num2) + 2 == *num1 || minOfTwo(*num1, *num2) + 2 == *num2);
}

int main()
{	
	//Create an integer variable for the first number. Call it number1 and give it the initial value of -1. Create a pointer to it.
	int number1 = -1;
	int *num1 = &number1;

	//Create an integer variable for the second number. Call it number2 and give it the initial value of -1. Create a pointer to it.
	int number2 = -1;
	int *num2 = &number2;

	//Ask the user to input the two numbers: "Please input the first number: " "Please input the second number: " and store the inout in the integer variables.
		//Try and make the previous step into a function, when you are done with task 2, by assigning pointers.
	cout << "Please Enter The First Number: ";
	cin >> number1;
	cout << "Please Enter The Second Number: ";
	cin >> number2;

	//Before the main function create a new one of type bool which takes in one int variable (named number) and call it isPrime.
	//It will check whether any number is prime so write that algorithm.

	//After that function create a new one - it will determine which number is smaller. It should be of type int, named minOfTwo. Takes two ints & spits out the smaller one.
	//Try to write the algorithm as a boolean opearatior in return.

	//After this function create a third one of type bool, named secondCondition which will check whether the smaller number +2 = the bigger number. It takes no prarameters.
	//In it call minOfTwo and see whether minOfTwo + 2 == number1 || minOfTwo + 2 == number2. If yes, return true. Else, return false.

	//Go back in main and if the results of isPrime and secondCondition are both true then the answer is True. Else, the answer is false.
	cout << "\n    Answer: " << ((isPrime(number1) && isPrime(number2)) && (secondCondition(num1, num2)) ? "True" : "False") << endl;
******************************************END*********************************************************

TASK 2
Да се напише функция която по дадени цели n и m числа и създава и отпечатва матрица с n реда и m стълба като матрицата се запълва по следния начин:

елементите по главния диагонал са равни на номера на реда, в който с намират

елементите над главния диагонал са равни на разликата на номера на стълба и номера на реда, в който се намират

елементите под главния диагонал са равни на произведението на номера на реда и номера на стъбла, в който се намират.

//Create two variables of type int, named rows and cols with the initial values of -1.
	int rows = -1, cols = -1;

	//Tell the user: " This Program Works Only With Quadratic Matrices! Please Enter The Number Of The Rows And The Columns: " and store the intput in the two ints.
	cout << "This Program Works Only With Quadratic Matrices! Please Enter The Number Of The Rows And The Columns: ";
	cin >> rows;
	cols = rows;

	//Create a constant int variable, named MAX_SIZE before the main function and give it the value of 50.

	//Go back in main and create an array with two dimentions, giving them MAX_SIZE. Name it darr.
	int darr[MAX_SIZE][MAX_SIZE] = { 0 };

	//Start outputting the array as follows: if (i == j) output i++; if (j > i) output j - i; else if (i > j) output j*i. i and j are part of a for cycle starting at 0.
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			if (i == j)
				darr[i][j] = i + 1;
			if (j > i)
				darr[i][j] = j - i;
			if (i > j)
				darr[i][j] = j * i;
		}
	}

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			cout << darr[i][j] << " ";
		}
		cout << endl;
	}
