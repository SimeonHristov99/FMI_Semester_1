Второ контролно по УП (семинари) на ИС13.01.2019 г.Вариант 1

Задача 1.
Да се напише програма, която въвежда квадратна матрица от цели числа с размер nxn
(n същосе   въвежда   от   клавиатурата),   след   което   намира   сумата   от   елементите
на   главния   ивторостепенния диагонал (центърът да се брои само веднъж). Да се провери дали
сумата естепен на двойката.Пример:Вход:1 2 34 5 67 8 9Изход:25No(обяснение: 1 + 5 + 9 + 3 + 7 = 25 => не е степен на двойката)


Задача 2.Две изречения са анаграми едно на друго, ако съдържат еднакъв брой букви (английски) ивсяка
буква от едното изречение се среща еднакъв брой пъти и в двете изречения. Не правимразлика между главни
и малки английски букви.Примери: “Astronomer” и “Moon starer”; “A B B A” и “baba”.Напишете функция, която
по два символни низа, съдържащи английски букви и евентуалноинтервали, проверява дали двата низа са анаграми
един на друг.


Задача 3.Да   се   напише  рекурсивна  функция,   която   по   даден   масив   от   дробни   числа
намирапроизведението на всички положителни числа, които са по-малки от числото, стоящо влявоот тях (само ако има такова).
Забележка: коректни, но нерекурсивни решения на зад. 3 ще носят много по-малко точки.
Пример: {2.1, 0, 9.9, 3, 1, -1, 14.5, 7} -> 21(обяснение: 21 = 3 * 1 * 7; пропускаме 2.1, тъй като вляво от него няма число)







======================================= EXERCISE 1 ==================================================

#include "stdafx.h"
#include <iostream>

using namespace std;

const int MAX_SIZE = 100;

bool isPowerOfTwo(int number) //Bool function which determines whether a number is a power of 2.
{
	if (number == 0)
	{
		return true;
	}		

	if (number % 2 == 0)
	{
		return isPowerOfTwo(number / 2);
	}

	return false;
}

int main()
{
	int rows = 0;
	int darr[MAX_SIZE][MAX_SIZE];

	cout << "Enter Number Of Rows And Columns: " << endl;
	cin >> rows;

	int cols = rows;

	cout << "Enter In The Integers: " << endl;

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			cin >> darr[i][j];
		}
			
	}		

	cout << "\nYour Matrix: " << endl;

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			cout << darr[i][j] << " ";
		}			
		cout << endl;
	}

	int sumMDiag = 0;
	int sumSecDiag = 0;

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			if (i == j)
			{
				sumMDiag += darr[i][j];
			}

			if (i + j == rows - 1 && !(i == j && i == rows / 2 && rows % 2 != 0))
			{
				sumSecDiag += darr[i][j];
			}				
		}
	}
	
	cout << "\n Answer: The Sum Of Both Diagonals Is " << sumMDiag + sumSecDiag << " And It Is " << (isPowerOfTwo(sumMDiag + sumSecDiag) ? "A Power Of 2!" : "Not A Power Of Two.") << endl;

    return 0;
}

======================================= EXERCISE 2 ==================================================

void removeElement(char str[]) //Function that shifts any string by one to the left.
{
	if (str[0] == '\0')
	{
		return;
	}	

	str[0] = str[1];

	return removeElement(str + 1);
}

void removeOther(char str[]) //Make any string consist of only letters.
{
	if (str[0] == '\0')
	{
		return;
	}		

	if (!(str[0] >= 'a' && str[0] <= 'z'))
	{
		removeElement(str);
		return removeOther(str);
	}
	
	return removeOther(str + 1);
}

void CapToSmall(char str[]) //Function that transforms every capital letter into a small one for any string.
{
	if (str[0] == '\0')
	{
		return;
	}		

	if (str[0] >= 'A' && str[0] <= 'Z')
	{
		str[0] = str[0] + ('a' - 'A');
	}		

	return CapToSmall(str + 1);
}

int getSize(char str[]) //Function that determines the leght of any string.
{
	if (str[0] == '\0')
	{
		return 0;
	}		

	return 1 + getSize(str + 1);
}

void swap(char &element1, char &element2)
{
	char temp = element2;
	element2 = element1;
	element1 = temp;
}

void orderAlpha(char str[]) //Function that orders any letters in ascending alphabetical order.
{
	if (str[0] == '\0')
	{
		return;
	}		

	int minIndex = 0;

	for (int i = 1; str[i]; ++i)
	{
		if (str[minIndex] > str[i])
		{
			minIndex = i;
		}			
	}	

	swap(str[0], str[minIndex]);

	return orderAlpha(str + 1);
}

bool compareHelper(char str1[], char str2[]) // Made it so as to be a bit easier to implemnt recursion.
{
	if (str1[0] != str2[0])
	{
		return false;
	}		

	if (str1[0] == '\0' && str2[0] == '\0')
	{
		return true;
	}		

	return compareHelper(str1 + 1, str2 + 1);
}

bool compare(char str1[], char str2[])
{
	CapToSmall(str1);
	removeOther(str1);
	CapToSmall(str2);
	removeOther(str2);

	if (getSize(str1) != getSize(str2))
	{
		return false;
	}		

	orderAlpha(str1);
	orderAlpha(str2);
	
	return compareHelper(str1, str2);
}

int main()
{
	char str1[64] = "";
	char str2[64] = "";

	cout << "Enter First Sentence: ";
	cin.getline(str1, 64);

	cout << "Enter Second Sentence: ";
	cin.getline(str2, 64);

	cout <<"\n    Result: "<< (compare(str1, str2) ? "Anagrams!" : "Not Anagrams") << endl;

    return 0;
}

======================================= EXERCISE 3 ==================================================

const int MAX_SIZE = 100;

double calculateHelper(double arr[], double &result, int size)
{
	if (size <= 1)
	{
		return 1;
	}		

	if (arr[size - 2] > 0 && arr[size - 1] < arr[size - 2] && arr[size - 1] > 0)
	{
		return arr[size - 1] * calculateHelper(arr, result, size - 1);
	}		

	return 1 * calculateHelper(arr, result, size - 1);
}

double calculate(double arr[], int size)
{
	double result = 0;

	return calculateHelper(arr, result, size);
}

int main()
{
	double arr[MAX_SIZE];
	int size = 0;

	cout << "How Many Elements Do You Want To Store: ";
	cin >> size;

	cout << "Now Please Enter Your Elements: ";
	for (int i = 0; i < size; ++i)
	{
		cout << "arr[" << i << "] = ";
		cin >> arr[i];
	}

	cout <<"\n    Result: "<< calculate(arr, size) << endl;

    return 0;
}
